// 80*384*24 * 7 time steps is a 12min simulation
// Cell size
c := 10e-9
cz := 10e-9
height := 100e-9
width := 500e-9
nanotube_width := 10e-9
nanotube_height := 7820e-9
thickness := 50e-9
x_displacement := 500e-9 // 250e-9
y_displacement := 380e-9 
z_displacement := thickness + 100e-9

// SetPBC(5, 0, 0)        // 5 extra images on left and right sides.
SetGridsize(100,782,24)
SetCellsize(c,c,cz)

// Permalloy parameters
Msat  = 800e3
Aex   = 13e-12
alpha = 0.1
EdgeSmooth = 8

// magnet definitions
magnets := universe().sub(universe())
system := universe().sub(universe())


rect1 := cuboid(width, height,thickness)
rect2 := cuboid(nanotube_width,nanotube_height, thickness)


for i:=0; i<=0; i+=1{
	top_left := rect1.transl(-i * width * 2 - x_displacement ,y_displacement,0)
	top_right := rect1.transl(i * width * 2 + x_displacement ,y_displacement,0)
	bottom_left := rect1.transl(-i * width * 2,-y_displacement,0) // this includes the centre magnet for i = 0
	if i > 0 {
		bottom_right := rect1.transl(i * width * 2,-y_displacement,0)
		magnets = magnets.add(top_left).add(bottom_left).add(top_right).add(bottom_right)

	} else {
		magnets = magnets.add(top_left).add(bottom_left).add(top_right)
	}
}

nanotube := rect2.transl(0, 0, z_displacement)
system = system.add(nanotube).add(magnets)

system = system.add(nanotube).add(magnets)


setgeom(system)
snapshot(geom)


// DefRegion first number is material, next argument is the shape.
// transl moves the object to a new location
DefRegion(1,magnets)
DefRegion(2,nanotube)

// save(regions)

// Permalloy parameters

Msat.SetRegion(1, 800e3)
Aex.SetRegion(1, 13e-12)
alpha.SetRegion(1, 0.05)

EdgeSmooth = 8

// At the start of a simulation all cells have region number 0.
// Following lines set the parameters of these regions to zero
Msat.SetRegion(0, 0)
m.SetRegion(0, uniform(0,0,0))
Aex.SetRegion(0, 0)

// Set parameters for CNT region
Msat.SetRegion(2, 0)
m.SetRegion(2, uniform(0,0,0))
Aex.SetRegion(2, 0)

// m is Reduced magnetization
// set m in region 1(inside the nanomagnets)
m.SetRegion(1,randomMag())  // uniform field in (x,y,z)

B_ext = vector(0, 250.0e-3, 0)


relax()                     // slower but robust for large changes - allow the system to play out and reach equilibrium
save(B_eff)    // relaxed state
// ^ this should save it in space-dependent format for region 2 the CNT
